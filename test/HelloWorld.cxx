// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file HelloWorld.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "HelloWorld.h"
#include "HelloWorldTypeObject.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

#define HelloWorldTest_max_cdr_typesize 532ULL;
#define TimeTest_max_cdr_typesize 8ULL;
#define HeaderTest_max_cdr_typesize 268ULL;
#define HelloWorldTest_max_key_cdr_typesize 0ULL;
#define TimeTest_max_key_cdr_typesize 0ULL;
#define HeaderTest_max_key_cdr_typesize 0ULL;

TimeTest::TimeTest()
{
    // long m_sec
    m_sec = 0;
    // unsigned long m_nanosec
    m_nanosec = 0;

    // Just to register all known types
    registerHelloWorldTypes();
}

TimeTest::~TimeTest()
{


}

TimeTest::TimeTest(
        const TimeTest& x)
{
    m_sec = x.m_sec;
    m_nanosec = x.m_nanosec;
}

TimeTest::TimeTest(
        TimeTest&& x) noexcept 
{
    m_sec = x.m_sec;
    m_nanosec = x.m_nanosec;
}

TimeTest& TimeTest::operator =(
        const TimeTest& x)
{

    m_sec = x.m_sec;
    m_nanosec = x.m_nanosec;

    return *this;
}

TimeTest& TimeTest::operator =(
        TimeTest&& x) noexcept
{

    m_sec = x.m_sec;
    m_nanosec = x.m_nanosec;

    return *this;
}

bool TimeTest::operator ==(
        const TimeTest& x) const
{

    return (m_sec == x.m_sec && m_nanosec == x.m_nanosec);
}

bool TimeTest::operator !=(
        const TimeTest& x) const
{
    return !(*this == x);
}

size_t TimeTest::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return TimeTest_max_cdr_typesize;
}

size_t TimeTest::getCdrSerializedSize(
        const TimeTest& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

void TimeTest::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_sec;
    scdr << m_nanosec;

}

void TimeTest::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_sec;
    dcdr >> m_nanosec;
}

/*!
 * @brief This function sets a value in member sec
 * @param _sec New value for member sec
 */
void TimeTest::sec(
        int32_t _sec)
{
    m_sec = _sec;
}

/*!
 * @brief This function returns the value of member sec
 * @return Value of member sec
 */
int32_t TimeTest::sec() const
{
    return m_sec;
}

/*!
 * @brief This function returns a reference to member sec
 * @return Reference to member sec
 */
int32_t& TimeTest::sec()
{
    return m_sec;
}

/*!
 * @brief This function sets a value in member nanosec
 * @param _nanosec New value for member nanosec
 */
void TimeTest::nanosec(
        uint32_t _nanosec)
{
    m_nanosec = _nanosec;
}

/*!
 * @brief This function returns the value of member nanosec
 * @return Value of member nanosec
 */
uint32_t TimeTest::nanosec() const
{
    return m_nanosec;
}

/*!
 * @brief This function returns a reference to member nanosec
 * @return Reference to member nanosec
 */
uint32_t& TimeTest::nanosec()
{
    return m_nanosec;
}



size_t TimeTest::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return TimeTest_max_key_cdr_typesize;
}

bool TimeTest::isKeyDefined()
{
    return false;
}

void TimeTest::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}

HeaderTest::HeaderTest()
{
    // TimeTest m_stamp

    // string m_frame_id
    m_frame_id ="";

    // Just to register all known types
    registerHelloWorldTypes();
}

HeaderTest::~HeaderTest()
{


}

HeaderTest::HeaderTest(
        const HeaderTest& x)
{
    m_stamp = x.m_stamp;
    m_frame_id = x.m_frame_id;
}

HeaderTest::HeaderTest(
        HeaderTest&& x) noexcept 
{
    m_stamp = std::move(x.m_stamp);
    m_frame_id = std::move(x.m_frame_id);
}

HeaderTest& HeaderTest::operator =(
        const HeaderTest& x)
{

    m_stamp = x.m_stamp;
    m_frame_id = x.m_frame_id;

    return *this;
}

HeaderTest& HeaderTest::operator =(
        HeaderTest&& x) noexcept
{

    m_stamp = std::move(x.m_stamp);
    m_frame_id = std::move(x.m_frame_id);

    return *this;
}

bool HeaderTest::operator ==(
        const HeaderTest& x) const
{

    return (m_stamp == x.m_stamp && m_frame_id == x.m_frame_id);
}

bool HeaderTest::operator !=(
        const HeaderTest& x) const
{
    return !(*this == x);
}

size_t HeaderTest::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return HeaderTest_max_cdr_typesize;
}

size_t HeaderTest::getCdrSerializedSize(
        const HeaderTest& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += TimeTest::getCdrSerializedSize(data.stamp(), current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.frame_id().size() + 1;


    return current_alignment - initial_alignment;
}

void HeaderTest::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_stamp;
    scdr << m_frame_id.c_str();

}

void HeaderTest::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_stamp;
    dcdr >> m_frame_id;
}

/*!
 * @brief This function copies the value in member stamp
 * @param _stamp New value to be copied in member stamp
 */
void HeaderTest::stamp(
        const TimeTest& _stamp)
{
    m_stamp = _stamp;
}

/*!
 * @brief This function moves the value in member stamp
 * @param _stamp New value to be moved in member stamp
 */
void HeaderTest::stamp(
        TimeTest&& _stamp)
{
    m_stamp = std::move(_stamp);
}

/*!
 * @brief This function returns a constant reference to member stamp
 * @return Constant reference to member stamp
 */
const TimeTest& HeaderTest::stamp() const
{
    return m_stamp;
}

/*!
 * @brief This function returns a reference to member stamp
 * @return Reference to member stamp
 */
TimeTest& HeaderTest::stamp()
{
    return m_stamp;
}
/*!
 * @brief This function copies the value in member frame_id
 * @param _frame_id New value to be copied in member frame_id
 */
void HeaderTest::frame_id(
        const std::string& _frame_id)
{
    m_frame_id = _frame_id;
}

/*!
 * @brief This function moves the value in member frame_id
 * @param _frame_id New value to be moved in member frame_id
 */
void HeaderTest::frame_id(
        std::string&& _frame_id)
{
    m_frame_id = std::move(_frame_id);
}

/*!
 * @brief This function returns a constant reference to member frame_id
 * @return Constant reference to member frame_id
 */
const std::string& HeaderTest::frame_id() const
{
    return m_frame_id;
}

/*!
 * @brief This function returns a reference to member frame_id
 * @return Reference to member frame_id
 */
std::string& HeaderTest::frame_id()
{
    return m_frame_id;
}


size_t HeaderTest::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return HeaderTest_max_key_cdr_typesize;
}

bool HeaderTest::isKeyDefined()
{
    return false;
}

void HeaderTest::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}

HelloWorldTest::HelloWorldTest()
{
    // HeaderTest m_head

    // string m_message
    m_message ="";
    // long m_index
    m_index = 0;

    // Just to register all known types
    registerHelloWorldTypes();
}

HelloWorldTest::~HelloWorldTest()
{



}

HelloWorldTest::HelloWorldTest(
        const HelloWorldTest& x)
{
    m_head = x.m_head;
    m_message = x.m_message;
    m_index = x.m_index;
}

HelloWorldTest::HelloWorldTest(
        HelloWorldTest&& x) noexcept 
{
    m_head = std::move(x.m_head);
    m_message = std::move(x.m_message);
    m_index = x.m_index;
}

HelloWorldTest& HelloWorldTest::operator =(
        const HelloWorldTest& x)
{

    m_head = x.m_head;
    m_message = x.m_message;
    m_index = x.m_index;

    return *this;
}

HelloWorldTest& HelloWorldTest::operator =(
        HelloWorldTest&& x) noexcept
{

    m_head = std::move(x.m_head);
    m_message = std::move(x.m_message);
    m_index = x.m_index;

    return *this;
}

bool HelloWorldTest::operator ==(
        const HelloWorldTest& x) const
{

    return (m_head == x.m_head && m_message == x.m_message && m_index == x.m_index);
}

bool HelloWorldTest::operator !=(
        const HelloWorldTest& x) const
{
    return !(*this == x);
}

size_t HelloWorldTest::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return HelloWorldTest_max_cdr_typesize;
}

size_t HelloWorldTest::getCdrSerializedSize(
        const HelloWorldTest& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += HeaderTest::getCdrSerializedSize(data.head(), current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.message().size() + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

void HelloWorldTest::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_head;
    scdr << m_message.c_str();
    scdr << m_index;

}

void HelloWorldTest::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_head;
    dcdr >> m_message;
    dcdr >> m_index;
}

/*!
 * @brief This function copies the value in member head
 * @param _head New value to be copied in member head
 */
void HelloWorldTest::head(
        const HeaderTest& _head)
{
    m_head = _head;
}

/*!
 * @brief This function moves the value in member head
 * @param _head New value to be moved in member head
 */
void HelloWorldTest::head(
        HeaderTest&& _head)
{
    m_head = std::move(_head);
}

/*!
 * @brief This function returns a constant reference to member head
 * @return Constant reference to member head
 */
const HeaderTest& HelloWorldTest::head() const
{
    return m_head;
}

/*!
 * @brief This function returns a reference to member head
 * @return Reference to member head
 */
HeaderTest& HelloWorldTest::head()
{
    return m_head;
}
/*!
 * @brief This function copies the value in member message
 * @param _message New value to be copied in member message
 */
void HelloWorldTest::message(
        const std::string& _message)
{
    m_message = _message;
}

/*!
 * @brief This function moves the value in member message
 * @param _message New value to be moved in member message
 */
void HelloWorldTest::message(
        std::string&& _message)
{
    m_message = std::move(_message);
}

/*!
 * @brief This function returns a constant reference to member message
 * @return Constant reference to member message
 */
const std::string& HelloWorldTest::message() const
{
    return m_message;
}

/*!
 * @brief This function returns a reference to member message
 * @return Reference to member message
 */
std::string& HelloWorldTest::message()
{
    return m_message;
}
/*!
 * @brief This function sets a value in member index
 * @param _index New value for member index
 */
void HelloWorldTest::index(
        int32_t _index)
{
    m_index = _index;
}

/*!
 * @brief This function returns the value of member index
 * @return Value of member index
 */
int32_t HelloWorldTest::index() const
{
    return m_index;
}

/*!
 * @brief This function returns a reference to member index
 * @return Reference to member index
 */
int32_t& HelloWorldTest::index()
{
    return m_index;
}



size_t HelloWorldTest::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return HelloWorldTest_max_key_cdr_typesize;
}

bool HelloWorldTest::isKeyDefined()
{
    return false;
}

void HelloWorldTest::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}
