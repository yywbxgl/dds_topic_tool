// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file HelloWorld.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _FAST_DDS_GENERATED_HELLOWORLD_H_
#define _FAST_DDS_GENERATED_HELLOWORLD_H_


#include <fastrtps/utils/fixed_size_string.hpp>

#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(HelloWorld_SOURCE)
#define HelloWorld_DllAPI __declspec( dllexport )
#else
#define HelloWorld_DllAPI __declspec( dllimport )
#endif // HelloWorld_SOURCE
#else
#define HelloWorld_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define HelloWorld_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
} // namespace fastcdr
} // namespace eprosima


/*!
 * @brief This class represents the structure TimeTest defined by the user in the IDL file.
 * @ingroup HELLOWORLD
 */
class TimeTest
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport TimeTest();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~TimeTest();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object TimeTest that will be copied.
     */
    eProsima_user_DllExport TimeTest(
            const TimeTest& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object TimeTest that will be copied.
     */
    eProsima_user_DllExport TimeTest(
            TimeTest&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object TimeTest that will be copied.
     */
    eProsima_user_DllExport TimeTest& operator =(
            const TimeTest& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object TimeTest that will be copied.
     */
    eProsima_user_DllExport TimeTest& operator =(
            TimeTest&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x TimeTest object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const TimeTest& x) const;

    /*!
     * @brief Comparison operator.
     * @param x TimeTest object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const TimeTest& x) const;

    /*!
     * @brief This function sets a value in member sec
     * @param _sec New value for member sec
     */
    eProsima_user_DllExport void sec(
            int32_t _sec);

    /*!
     * @brief This function returns the value of member sec
     * @return Value of member sec
     */
    eProsima_user_DllExport int32_t sec() const;

    /*!
     * @brief This function returns a reference to member sec
     * @return Reference to member sec
     */
    eProsima_user_DllExport int32_t& sec();

    /*!
     * @brief This function sets a value in member nanosec
     * @param _nanosec New value for member nanosec
     */
    eProsima_user_DllExport void nanosec(
            uint32_t _nanosec);

    /*!
     * @brief This function returns the value of member nanosec
     * @return Value of member nanosec
     */
    eProsima_user_DllExport uint32_t nanosec() const;

    /*!
     * @brief This function returns a reference to member nanosec
     * @return Reference to member nanosec
     */
    eProsima_user_DllExport uint32_t& nanosec();


    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const TimeTest& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    int32_t m_sec;
    uint32_t m_nanosec;

};
/*!
 * @brief This class represents the structure HeaderTest defined by the user in the IDL file.
 * @ingroup HELLOWORLD
 */
class HeaderTest
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport HeaderTest();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~HeaderTest();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object HeaderTest that will be copied.
     */
    eProsima_user_DllExport HeaderTest(
            const HeaderTest& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object HeaderTest that will be copied.
     */
    eProsima_user_DllExport HeaderTest(
            HeaderTest&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object HeaderTest that will be copied.
     */
    eProsima_user_DllExport HeaderTest& operator =(
            const HeaderTest& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object HeaderTest that will be copied.
     */
    eProsima_user_DllExport HeaderTest& operator =(
            HeaderTest&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x HeaderTest object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const HeaderTest& x) const;

    /*!
     * @brief Comparison operator.
     * @param x HeaderTest object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const HeaderTest& x) const;

    /*!
     * @brief This function copies the value in member stamp
     * @param _stamp New value to be copied in member stamp
     */
    eProsima_user_DllExport void stamp(
            const TimeTest& _stamp);

    /*!
     * @brief This function moves the value in member stamp
     * @param _stamp New value to be moved in member stamp
     */
    eProsima_user_DllExport void stamp(
            TimeTest&& _stamp);

    /*!
     * @brief This function returns a constant reference to member stamp
     * @return Constant reference to member stamp
     */
    eProsima_user_DllExport const TimeTest& stamp() const;

    /*!
     * @brief This function returns a reference to member stamp
     * @return Reference to member stamp
     */
    eProsima_user_DllExport TimeTest& stamp();
    /*!
     * @brief This function copies the value in member frame_id
     * @param _frame_id New value to be copied in member frame_id
     */
    eProsima_user_DllExport void frame_id(
            const std::string& _frame_id);

    /*!
     * @brief This function moves the value in member frame_id
     * @param _frame_id New value to be moved in member frame_id
     */
    eProsima_user_DllExport void frame_id(
            std::string&& _frame_id);

    /*!
     * @brief This function returns a constant reference to member frame_id
     * @return Constant reference to member frame_id
     */
    eProsima_user_DllExport const std::string& frame_id() const;

    /*!
     * @brief This function returns a reference to member frame_id
     * @return Reference to member frame_id
     */
    eProsima_user_DllExport std::string& frame_id();

    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const HeaderTest& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    TimeTest m_stamp;
    std::string m_frame_id;

};
/*!
 * @brief This class represents the structure HelloWorldTest defined by the user in the IDL file.
 * @ingroup HELLOWORLD
 */
class HelloWorldTest
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport HelloWorldTest();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~HelloWorldTest();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object HelloWorldTest that will be copied.
     */
    eProsima_user_DllExport HelloWorldTest(
            const HelloWorldTest& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object HelloWorldTest that will be copied.
     */
    eProsima_user_DllExport HelloWorldTest(
            HelloWorldTest&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object HelloWorldTest that will be copied.
     */
    eProsima_user_DllExport HelloWorldTest& operator =(
            const HelloWorldTest& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object HelloWorldTest that will be copied.
     */
    eProsima_user_DllExport HelloWorldTest& operator =(
            HelloWorldTest&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x HelloWorldTest object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const HelloWorldTest& x) const;

    /*!
     * @brief Comparison operator.
     * @param x HelloWorldTest object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const HelloWorldTest& x) const;

    /*!
     * @brief This function copies the value in member head
     * @param _head New value to be copied in member head
     */
    eProsima_user_DllExport void head(
            const HeaderTest& _head);

    /*!
     * @brief This function moves the value in member head
     * @param _head New value to be moved in member head
     */
    eProsima_user_DllExport void head(
            HeaderTest&& _head);

    /*!
     * @brief This function returns a constant reference to member head
     * @return Constant reference to member head
     */
    eProsima_user_DllExport const HeaderTest& head() const;

    /*!
     * @brief This function returns a reference to member head
     * @return Reference to member head
     */
    eProsima_user_DllExport HeaderTest& head();
    /*!
     * @brief This function copies the value in member message
     * @param _message New value to be copied in member message
     */
    eProsima_user_DllExport void message(
            const std::string& _message);

    /*!
     * @brief This function moves the value in member message
     * @param _message New value to be moved in member message
     */
    eProsima_user_DllExport void message(
            std::string&& _message);

    /*!
     * @brief This function returns a constant reference to member message
     * @return Constant reference to member message
     */
    eProsima_user_DllExport const std::string& message() const;

    /*!
     * @brief This function returns a reference to member message
     * @return Reference to member message
     */
    eProsima_user_DllExport std::string& message();
    /*!
     * @brief This function sets a value in member index
     * @param _index New value for member index
     */
    eProsima_user_DllExport void index(
            int32_t _index);

    /*!
     * @brief This function returns the value of member index
     * @return Value of member index
     */
    eProsima_user_DllExport int32_t index() const;

    /*!
     * @brief This function returns a reference to member index
     * @return Reference to member index
     */
    eProsima_user_DllExport int32_t& index();


    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const HelloWorldTest& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    HeaderTest m_head;
    std::string m_message;
    int32_t m_index;

};

#endif // _FAST_DDS_GENERATED_HELLOWORLD_H_