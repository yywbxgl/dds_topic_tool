// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file HelloWorldPublisher.cpp
 * This file contains the implementation of the publisher functions.
 *
 * This file was generated by the tool fastcdrgen.
 */


#include "HelloWorldPublisher.h"
#include "HelloWorldPubSubTypes.h"
#include "HelloWorldTypeObject.h"

#include <fastdds/dds/domain/DomainParticipantFactory.hpp>
#include <fastdds/dds/publisher/Publisher.hpp>
#include <fastdds/dds/publisher/qos/PublisherQos.hpp>
#include <fastdds/dds/publisher/DataWriter.hpp>
#include <fastdds/dds/publisher/qos/DataWriterQos.hpp>

#include <thread>
#include <chrono>

using namespace eprosima::fastdds::dds;

HelloWorldPublisher::HelloWorldPublisher()
    : participant_(nullptr)
    , publisher_(nullptr)
    , topic_(nullptr)
    , topic2_(nullptr)
    , topic3_(nullptr)
    , writer_(nullptr)
    , writer2_(nullptr)
    , writer3_(nullptr)
    , type_(new HelloWorldPubSubType())
    , type2_(new HelloWorld_test_2PubSubType())
    , type3_(new HelloWorld_test_3PubSubType())
{
}

HelloWorldPublisher::~HelloWorldPublisher()
{
    if (writer_ != nullptr)
    {
        publisher_->delete_datawriter(writer_);
    }
    if (publisher_ != nullptr)
    {
        participant_->delete_publisher(publisher_);
    }
    if (topic_ != nullptr)
    {
        participant_->delete_topic(topic_);
    }
    DomainParticipantFactory::get_instance()->delete_participant(participant_);
}

bool HelloWorldPublisher::init()
{
    /* Initialize data_ here */

    //CREATE THE PARTICIPANT
    DomainParticipantQos pqos;
    pqos.wire_protocol().builtin.discovery_config.discoveryProtocol =  eprosima::fastrtps::rtps::SIMPLE;
    pqos.wire_protocol().builtin.discovery_config.use_SIMPLE_EndpointDiscoveryProtocol = true;
    pqos.wire_protocol().builtin.discovery_config.m_simpleEDP.use_PublicationReaderANDSubscriptionWriter = true;
    pqos.wire_protocol().builtin.discovery_config.m_simpleEDP.use_PublicationWriterANDSubscriptionReader = true;
    pqos.wire_protocol().builtin.typelookup_config.use_server = true;
    pqos.wire_protocol().builtin.use_WriterLivelinessProtocol = false;
    pqos.wire_protocol().builtin.discovery_config.leaseDuration = eprosima::fastrtps::c_TimeInfinite;
    pqos.name("dds topic tool test");
    participant_ = DomainParticipantFactory::get_instance()->create_participant(0, pqos);

    if (participant_ == nullptr)
    {
        return false;
    }

    //REGISTER THE TYPE
    registerHelloWorldTypes();
    type_.register_type(participant_);
    type2_.register_type(participant_);
    type3_.register_type(participant_);

    //CREATE THE PUBLISHER
    publisher_ = participant_->create_publisher(PUBLISHER_QOS_DEFAULT, nullptr);
    if (publisher_ == nullptr)
    {
        return false;
    }

    //CREATE THE TOPIC
    topic_ = participant_->create_topic("HelloWorldTopic", type_.get_type_name(), TOPIC_QOS_DEFAULT);
    if (topic_ == nullptr)
    {
        return false;
    }

     //CREATE THE TOPIC
    topic2_ = participant_->create_topic(
        "HelloWorldTopic_22222",
        type2_.get_type_name(),
        TOPIC_QOS_DEFAULT);
    if (topic2_ == nullptr)
    {
        return false;
    }

     //CREATE THE TOPIC
    topic3_ = participant_->create_topic(
        "HelloWorldTopic_33333",
        type3_.get_type_name(),
        TOPIC_QOS_DEFAULT);
    if (topic3_ == nullptr)
    {
        return false;
    }

    // CREATE THE WRITER
    DataWriterQos wqos;
    writer_ = publisher_->create_datawriter(topic_, wqos, &listener_);
    if (writer_ == nullptr)
    {
        return false;
    }

    writer2_ = publisher_->create_datawriter(topic2_, DATAWRITER_QOS_DEFAULT, &listener_);
    if (writer2_ == nullptr)
    {
        return false;
    }

    writer3_ = publisher_->create_datawriter(topic3_, DATAWRITER_QOS_DEFAULT, &listener_);
    if (writer3_ == nullptr)
    {
        return false;
    }

    std::cout << "HelloWorld DataWriter created." << std::endl;
    return true;
}

void HelloWorldPublisher::PubListener::on_publication_matched(
        eprosima::fastdds::dds::DataWriter*,
        const eprosima::fastdds::dds::PublicationMatchedStatus& info)
{
    if (info.current_count_change == 1)
    {
        matched = info.total_count;
        std::cout << "DataWriter matched." << std::endl;
    }
    else if (info.current_count_change == -1)
    {
        matched = info.total_count;
        std::cout << "DataWriter unmatched." << std::endl;
    }
    else
    {
        std::cout << info.current_count_change
                  << " is not a valid value for PublicationMatchedStatus current count change" << std::endl;
    }
}

void HelloWorldPublisher::run()
{
    HelloWorld st;
    HelloWorld_test_2 st2;
    HelloWorld_test_3 st3;
    /* Initialize your structure here */
    int msgsent = 0;
    while(1) {
        st.index(msgsent);
        st2.message("test1");
        writer_->write(&st);
        std::cout << "Sending sample, count=" << msgsent << std::endl;

        st2.index(msgsent);
        st2.message("test2");
        writer2_->write(&st2);
        std::cout << "Sending sample, count=" << msgsent << std::endl;

        st3.index(msgsent);
        st3.message("test3");
        st3.aaa().index(msgsent);
        writer3_->write(&st3);
        std::cout << "Sending sample, count=" << msgsent << std::endl;

        ++msgsent;
        std::this_thread::sleep_for(std::chrono::milliseconds(250)); // Sleep 250 ms
    }

}
